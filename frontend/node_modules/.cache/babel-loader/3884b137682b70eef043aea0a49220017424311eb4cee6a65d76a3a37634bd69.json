{"ast":null,"code":"var _jsxFileName = \"E:\\\\BizimHesap\\\\accounting-app\\\\frontend\\\\src\\\\pages\\\\EditSalePage.js\",\n  _s = $RefreshSig$();\n// frontend/src/pages/EditSalePage.js\n\nimport React, { useState, useEffect } from 'react';\nimport axiosInstance from '../utils/axiosInstance';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { Form, Button, Card, Row, Col, Table, Alert, Spinner } from 'react-bootstrap';\nimport { FaTrash } from 'react-icons/fa';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EditSalePage() {\n  _s();\n  const {\n    id\n  } = useParams(); // Get the sale ID from the URL\n  const navigate = useNavigate();\n\n  // Data from API\n  const [customers, setCustomers] = useState([]);\n  const [products, setProducts] = useState([]);\n\n  // Form state\n  const [customerId, setCustomerId] = useState('');\n  const [saleItems, setSaleItems] = useState([]);\n\n  // UI state\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        // Fetch customers, products, and the existing sale data all at once\n        const [customerRes, productRes, saleRes] = await Promise.all([axiosInstance.get('/customers/'), axiosInstance.get('/products/'), axiosInstance.get(`/sales/${id}/`)]);\n        setCustomers(customerRes.data);\n        setProducts(productRes.data);\n\n        // Pre-fill the form with data from the existing sale\n        const saleData = saleRes.data;\n        setCustomerId(saleData.customer);\n        setSaleItems(saleData.items.map(item => ({\n          product_id: item.product.id,\n          quantity: item.quantity,\n          unit_price: item.unit_price\n        })));\n      } catch (err) {\n        setError('Failed to load initial data.');\n        console.error(err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchInitialData();\n  }, [id]);\n  const handleItemChange = (index, event) => {/* ... (same as NewSalePage) ... */};\n  const handleAddItem = () => {/* ... (same as NewSalePage) ... */};\n  const handleRemoveItem = index => {/* ... (same as NewSalePage) ... */};\n  const calculateTotal = () => {/* ... (same as NewSalePage) ... */};\n  const handleSubmit = async event => {\n    event.preventDefault();\n    setError('');\n    const saleData = {\n      customer_id: parseInt(customerId),\n      items: saleItems.map(item => ({\n        product_id: parseInt(item.product_id),\n        quantity: parseInt(item.quantity),\n        unit_price: parseFloat(item.unit_price)\n      }))\n    };\n    try {\n      // Use the PUT method to update the sale\n      await axiosInstance.put(`/sales/${id}/`, saleData);\n      navigate(`/sales/${id}`); // Redirect back to the detail page on success\n    } catch (err) {\n      console.error(err);\n      setError('Failed to update sale. Please check your input.');\n    }\n  };\n\n  // Copy-paste the unchanged helper functions here\n  // handleItemChange, handleAddItem, handleRemoveItem, calculateTotal\n  // ...\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-center\",\n    children: /*#__PURE__*/_jsxDEV(Spinner, {\n      animation: \"border\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 54\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 25\n  }, this);\n  if (error && !saleItems.length) return /*#__PURE__*/_jsxDEV(Alert, {\n    variant: \"danger\",\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 44\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n      children: /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Edit Sale\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 26\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Card.Body, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n}\n\n// NOTE: You need to copy the helper functions and the JSX for the form from NewSalePage.js\n// into the EditSalePage.js file where indicated.\n_s(EditSalePage, \"pkNGpybWQGGRyj9Y7kd3t8MQbIA=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = EditSalePage;\nexport default EditSalePage;\nvar _c;\n$RefreshReg$(_c, \"EditSalePage\");","map":{"version":3,"names":["React","useState","useEffect","axiosInstance","useNavigate","useParams","Form","Button","Card","Row","Col","Table","Alert","Spinner","FaTrash","jsxDEV","_jsxDEV","EditSalePage","_s","id","navigate","customers","setCustomers","products","setProducts","customerId","setCustomerId","saleItems","setSaleItems","loading","setLoading","error","setError","fetchInitialData","customerRes","productRes","saleRes","Promise","all","get","data","saleData","customer","items","map","item","product_id","product","quantity","unit_price","err","console","handleItemChange","index","event","handleAddItem","handleRemoveItem","calculateTotal","handleSubmit","preventDefault","customer_id","parseInt","parseFloat","put","className","children","animation","fileName","_jsxFileName","lineNumber","columnNumber","length","variant","Header","Body","_c","$RefreshReg$"],"sources":["E:/BizimHesap/accounting-app/frontend/src/pages/EditSalePage.js"],"sourcesContent":["// frontend/src/pages/EditSalePage.js\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport axiosInstance from '../utils/axiosInstance';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport { Form, Button, Card, Row, Col, Table, Alert, Spinner } from 'react-bootstrap';\r\nimport { FaTrash } from 'react-icons/fa';\r\n\r\nfunction EditSalePage() {\r\n    const { id } = useParams(); // Get the sale ID from the URL\r\n    const navigate = useNavigate();\r\n\r\n    // Data from API\r\n    const [customers, setCustomers] = useState([]);\r\n    const [products, setProducts] = useState([]);\r\n    \r\n    // Form state\r\n    const [customerId, setCustomerId] = useState('');\r\n    const [saleItems, setSaleItems] = useState([]);\r\n    \r\n    // UI state\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState('');\r\n\r\n    useEffect(() => {\r\n        const fetchInitialData = async () => {\r\n            try {\r\n                // Fetch customers, products, and the existing sale data all at once\r\n                const [customerRes, productRes, saleRes] = await Promise.all([\r\n                    axiosInstance.get('/customers/'),\r\n                    axiosInstance.get('/products/'),\r\n                    axiosInstance.get(`/sales/${id}/`)\r\n                ]);\r\n\r\n                setCustomers(customerRes.data);\r\n                setProducts(productRes.data);\r\n\r\n                // Pre-fill the form with data from the existing sale\r\n                const saleData = saleRes.data;\r\n                setCustomerId(saleData.customer);\r\n                setSaleItems(saleData.items.map(item => ({\r\n                    product_id: item.product.id,\r\n                    quantity: item.quantity,\r\n                    unit_price: item.unit_price,\r\n                })));\r\n\r\n            } catch (err) {\r\n                setError('Failed to load initial data.');\r\n                console.error(err);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n        fetchInitialData();\r\n    }, [id]);\r\n\r\n    const handleItemChange = (index, event) => { /* ... (same as NewSalePage) ... */ };\r\n    const handleAddItem = () => { /* ... (same as NewSalePage) ... */ };\r\n    const handleRemoveItem = (index) => { /* ... (same as NewSalePage) ... */ };\r\n    const calculateTotal = () => { /* ... (same as NewSalePage) ... */ };\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        setError('');\r\n\r\n        const saleData = {\r\n            customer_id: parseInt(customerId),\r\n            items: saleItems.map(item => ({\r\n                product_id: parseInt(item.product_id),\r\n                quantity: parseInt(item.quantity),\r\n                unit_price: parseFloat(item.unit_price)\r\n            }))\r\n        };\r\n        \r\n        try {\r\n            // Use the PUT method to update the sale\r\n            await axiosInstance.put(`/sales/${id}/`, saleData);\r\n            navigate(`/sales/${id}`); // Redirect back to the detail page on success\r\n        } catch (err) {\r\n            console.error(err);\r\n            setError('Failed to update sale. Please check your input.');\r\n        }\r\n    };\r\n\r\n    // Copy-paste the unchanged helper functions here\r\n    // handleItemChange, handleAddItem, handleRemoveItem, calculateTotal\r\n    // ...\r\n\r\n    if (loading) return <div className=\"text-center\"><Spinner animation=\"border\" /></div>;\r\n    if (error && !saleItems.length) return <Alert variant=\"danger\">{error}</Alert>;\r\n\r\n    return (\r\n        <Card>\r\n            <Card.Header><h4>Edit Sale</h4></Card.Header>\r\n            <Card.Body>\r\n                {/* ... (The entire JSX form from NewSalePage.js goes here, no changes needed) ... */}\r\n                {/* ... The form will use the state variables we pre-filled in useEffect ... */}\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n}\r\n\r\n// NOTE: You need to copy the helper functions and the JSX for the form from NewSalePage.js\r\n// into the EditSalePage.js file where indicated.\r\nexport default EditSalePage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}