# Generated by Django 5.2.7 on 2025-10-16 05:23

from decimal import Decimal

from django.db import migrations
from django.utils import timezone
from django.utils.text import slugify


def create_accounts_and_backfill(apps, schema_editor):
    User = apps.get_model("auth", "User")
    Account = apps.get_model("api", "Account")
    AccountMembership = apps.get_model("api", "AccountMembership")
    SubscriptionPlan = apps.get_model("api", "SubscriptionPlan")
    Subscription = apps.get_model("api", "Subscription")

    free_plan, _ = SubscriptionPlan.objects.get_or_create(
        code="free",
        defaults={
            "name": "Free",
            "user_limit": 5,
            "price": Decimal("0"),
            "billing_interval": "monthly",
            "description": "Default free tier",
            "is_active": True,
        },
    )

    accounts_by_user: dict[int, int] = {}
    existing_names = set(Account.objects.values_list("name", flat=True))
    existing_slugs = set(Account.objects.values_list("slug", flat=True))
    now = timezone.now()

    for user in User.objects.all():
        first_name = getattr(user, "first_name", "") or ""
        last_name = getattr(user, "last_name", "") or ""
        full_name = f"{first_name} {last_name}".strip()
        username = getattr(user, "username", "") or ""
        email = getattr(user, "email", "") or ""
        base_name = (full_name or username or email or f"Account {user.pk}").strip() or f"Account {user.pk}"
        name_candidate = base_name
        suffix = 1
        while name_candidate in existing_names:
            suffix += 1
            name_candidate = f"{base_name} {suffix}"
        existing_names.add(name_candidate)

        base_slug = slugify(name_candidate) or f"account-{user.pk}"
        slug_candidate = base_slug
        slug_suffix = 1
        while slug_candidate in existing_slugs:
            slug_suffix += 1
            slug_candidate = f"{base_slug}-{slug_suffix}"
        existing_slugs.add(slug_candidate)

        account = Account.objects.create(name=name_candidate, slug=slug_candidate, owner=user)
        AccountMembership.objects.create(
            account=account,
            user=user,
            is_owner=True,
            is_admin=True,
            is_billing_manager=True,
        )
        Subscription.objects.create(
            account=account,
            plan=free_plan,
            status="active",
            current_period_start=now,
            seats_in_use=1,
        )
        accounts_by_user[user.pk] = account.pk

    model_mappings = [
        ("Customer", "created_by_id"),
        ("Sale", "created_by_id"),
        ("Offer", "created_by_id"),
        ("BankAccount", "created_by_id"),
        ("BankAccountTransaction", "created_by_id"),
        ("Payment", "created_by_id"),
        ("Warehouse", "created_by_id"),
        ("Product", "created_by_id"),
        ("SaleReturn", "created_by_id"),
        ("Supplier", "created_by_id"),
        ("ExpenseCategory", "created_by_id"),
        ("Expense", "created_by_id"),
        ("Purchase", "created_by_id"),
        ("PurchaseReturn", "created_by_id"),
    ]

    for model_name, user_field in model_mappings:
        Model = apps.get_model("api", model_name)
        updates = []
        for obj in Model.objects.filter(account__isnull=True).only("id", user_field):
            user_id = getattr(obj, user_field)
            account_id = accounts_by_user.get(user_id)
            if account_id:
                updates.append((obj.pk, account_id))
        for pk, account_id in updates:
            Model.objects.filter(pk=pk).update(account_id=account_id)


class Migration(migrations.Migration):

    dependencies = [
        ("api", "0027_subscriptionplan_bankaccounttransaction_bank_account_and_more"),
    ]

    operations = [
        migrations.RunPython(create_accounts_and_backfill, migrations.RunPython.noop),
    ]
